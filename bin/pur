#!/usr/bin/env ruby

class Pur
  def self.help_screen
    <<-HELP_SCREEN.gsub /^    /, ''
    Usage: pur [HorizontalMap | HorizontalFilter | Regexp]* (- VerticalInitialValue VerticalReduction)?

      Heavily inspired by pru, pipable ruby. Used to map/filter/reduce stdin.

      HorizontalMap:
        Is used to map the current line to a new value.
        Any expression that evaluates to a non true/false/nil value is considered a map
        Each map is evaluated within the context of the result of the previous map, with the initial value being the current line.

        e.g. $ ruby -e 'puts "aaa\\nbb"' | pur size
             3
             2

      HorizontalFilter:
        Any expression which returns true/false/nil is used to filter the results.
        The current expression will be kept if the result is true, and discarded if it is false/nil.

        e.g. $ ruby -e 'puts "aaa\\nbb"' | pur 'size == 3'
             aaa

      Regexp:
        Any regexp is used to filter the results, it is equivalent to 'regexp === to_s'

      VerticalInitialValue:
        When performing a vertical reduction (pass the mapped/filtered results to a function which aggregates them and prints at the end)
        This provides the initial value.

      VerticalReduction:
        This code will be passed each mapped/filtered result, it can access the aggregate value through _,
        it will be printed at the end of the input

        e.g. $ ruby -e 'puts *1..10' | pur to_i - 0 '_ + self'
             55

        e.g. $ ruby -e 'puts *"a".."c"' | pur - String.new '_ << self'
             abc

    HELP_SCREEN
  end

  def initialize(argv, instream, outstream, errstream)
    argv = convert_regexes argv
    self.argv      = argv
    self.instream  = instream
    self.outstream = outstream
    self.errstream = errstream
    @should_reduce_down = argv.include? '-'
    if reduce_down?
      case argv[argv.index('-')..-1].size
      when 3
        @vertical_value, @vertical_reducer = argv[-2..-1]
        @vertical_value = eval @vertical_value
      when 0, 1
        @error_message = "Must provide an initial value (expecting exactly two dashed args, but got #{argv.inspect}"
      else
        @error_message = "Expecting an initial value and code to run (two arguments to the right of the dash)"
      end
    end
  end

  def call
    if argv.any? { |arg| arg == '-h' || arg == '--help' }
      outstream.puts self.class.help_screen
      return 0
    end

    raise @error_message if @error_message

    instream.each_line do |line|
      line.chomp!
      result = reduce_across line
      next if !result
      if reduce_down?
        vertical_reduction result
      else
        outstream.puts result
      end
    end
    outstream.puts @vertical_value if reduce_down?
    0
  rescue Exception
    errstream.puts $!.message
    return 1
  end

  private

  def vertical_reduction(current_line)
    @vertical_value = current_line.instance_eval("-> _ { #@vertical_reducer }").call(@vertical_value)
  end

  def reduce_down?
    @should_reduce_down
  end

  def convert_regexes(args)
    args.map do |arg|
      if arg.start_with? "/" then "#{arg} === to_s" else arg end
    end
  end

  def reduce_across(line)
    old_var = var = line
    argv.each do |arg|
      return var if arg == '-'
      var = apply arg, var
      return unless var
      return old_var if var == true
      old_var = var
    end
    var
  end

  def apply(applier, applyee)
    applyee.instance_eval applier
  end

  attr_accessor :argv, :instream, :outstream, :errstream
end

if $0 !~ /rspec/
  exit Pur.new(ARGV, $stdin, $stdout, $stderr).call
else
  describe Pur do
    require 'stringio'

    Invocation = Struct.new :exitstatus, :out_string, :err_string

    def invoke(input_lines, argv)
      stdin  = StringIO.new input_lines.join("\n")
      stdout = StringIO.new
      stderr = StringIO.new
      Invocation.new described_class.new(argv, stdin, stdout, stderr).call,
                     stdout.string,
                     stderr.string
    end

    it 'treats regexes as selections' do
      invoke(%w[abc def cAb], ['/a/']).out_string.should == "abc\n"
      invoke(%w[abc def cAb], ['/a/i']).out_string.should == "abc\ncAb\n"
    end

    it 'treats boolean expressions as selections' do
      invoke(%w[abc def cAb], ['start_with? "d"']).out_string.should == "def\n"
    end

    it 'treats other expressions as mappings' do
      invoke(%w[abc defg], ['size']).out_string.should == "3\n4\n"
    end

    it 'allows these to be chained together, with self as the result of the previous mapping' do
      invoke(%w[abc defg], %w[chars to_a last ord]).out_string.should == "99\n103\n"
    end

    it 'converts mapped things to strings for successant regexes to match against' do
      invoke(%w[aaa bb cccc], %w[size /3|4/]).out_string.should == "3\n4\n"
    end

    it 'allows a reduction after a dash, with _ being bound to the previous result, and self the current result' do
      invoke(%w[abc defg], %w[- 0 _+size]).out_string.should == "7\n"
      invoke(%w[abc defg hijkl], %w[/a|d/ size - 10 _+size]).out_string.should == "17\n"
    end

    it 'raises an error if not given a starting value' do
      invoke(%w[abc defg], %w[- _+size]).out_string.should == ""
      invoke(%w[abc defg], %w[- _+size]).err_string.should include "initial value"
      invoke(%w[abc defg], %w[- _+size]).exitstatus.should_not be_zero
      invoke(%w[abc defg], %w[- 10 _+size]).exitstatus.should == 0
    end

    it 'raises an error if given more than two arguments to the vertical reduction' do
      invoke(%w[abc defg], %w[- 0 1 2]).err_string.should include "two arguments"
    end

    it 'reports errors to stderr, and exits with a non-zero exit status' do
      invoke(%w[abc], ['self']).out_string.should == "abc\n"
      invoke(%w[abc], ['self']).err_string.should == ""
      invoke(%w[abc], ['self']).exitstatus.should be_zero

      invoke(%w[abc], ['raise("omg")']).out_string.should == ""
      invoke(%w[abc], ['raise("omg")']).err_string.should == "omg\n"
      invoke(%w[abc], ['raise("omg")']).exitstatus.should_not be_zero
    end

    it 'reports usage when given the -h or --help flags' do
      invoke(%w[abc], ['-h']).out_string.should == Pur.help_screen
      invoke(%w[abc], ['-h']).err_string.should == ''
      invoke(%w[abc], ['-h']).exitstatus.should == 0

      invoke(%w[abc], ['--help']).out_string.should == Pur.help_screen
      invoke(%w[abc], ['--help']).err_string.should == ''
      invoke(%w[abc], ['--help']).exitstatus.should == 0
    end
  end
end
