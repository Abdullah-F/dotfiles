#!/usr/bin/env ruby

require 'shellwords'
begin
  # looks like this might be a good all-environment alternative: https://github.com/guard/listen
  require 'rb-fsevent'
rescue LoadError
  $stderr.puts 'Looks like you need to `gem install rb-fsevent` or fix your $LOAD_PATH or something'
  exit 1
end

module IfChange
  class Flags
    attr_accessor :show_help, :watch_paths, :ignore_paths, :responders
    alias show_help? show_help

    def initialize
      @show_help    = false
      @watch_paths  = []
      @ignore_paths = []
      @responders   = []
    end
  end

  def self.responder_from(shell_invocation)
    lambda do |path|
      Shellwords.split(shell_invocation)
                .map { |word| word.gsub('{}', path) }
    end
  end

  def self.parse_args(args)
    args  = args.dup
    flags = Flags.new
    until args.empty?
      arg = args.shift
      case arg
      when '-h', '--help' then flags.show_help = true
      when '--then'       then flags.responders << responder_from(args.shift)
      when '-'            then flags.watch_paths.concat args
      when /\A-(.*)/      then flags.ignore_paths << $1
      else                     flags.watch_paths << arg
      end
    end
    flags
  end
end

if $0 !~ /rspec/

  paths   = ARGV.reject { |arg| arg.start_with? '-' }
  fsevent = FSEvent.new
  fsevent.watch paths do |directories|
    puts "Detected change inside: #{directories.inspect}"
  end
  fsevent.run
else
  describe 'parsing options' do
    def call(args)
      IfChange.parse_args(args)
    end

    it 'does not mutate the input array' do
      ary = ['-h']
      call ary
      expect(ary).to eq ['-h']
    end

    it 'sets show_help? on -h and --help' do
      expect(call([]).show_help?).to be_falsy
      expect(call(['-h']).show_help?).to be_truthy
      expect(call(['--help']).show_help?).to be_truthy
    end

    it 'aggregates non-flags into expanded watch_paths' do
      expect(call([   ]).watch_paths).to eq [   ]
      expect(call(['a']).watch_paths).to eq ['a']
      expect(call(['b', '-h', 'c', '--help']).watch_paths).to eq ['b', 'c']
    end

    it 'aggregates -unknown-flag into expanded ignore_paths' do
      expect(call([]).ignore_paths).to eq [  ]
      expect(call(['-not-a-flag']).ignore_paths).to eq ['not-a-flag']
      expect(call(%w[path --help -not-a-flag -h -other-dir]).ignore_paths).to eq ['not-a-flag', 'other-dir']
    end

    it 'considers everything after a dash to be an include filename' do
      expect(call(['-h']).watch_paths).to eq []
      expect(call(['-', '-h']).watch_paths).to eq ['-h']
      expect(call(['-', '--help']).watch_paths).to eq ['--help']
      expect(call(['-', '-other']).watch_paths).to eq ['-other']
    end

    it 'aggregates --then into responders' do
      expect(call([]).responders).to eq []
      expect(call(['--then', 'something']).responders.map { |r| r.call "some/path" }).to eq [['something']]
      expect(call(['--help', '--then', 'something', 'path', '--then', 'other', 'another-path']).responders.map { |r| r.call "some/path" }).to eq [['something'], ['other']]

      responder = call(['--then', 'omg']).responders.first
      expect(responder.arity).to eq 1
    end

    describe 'responders' do
      def call(shell_program)
        IfChange.responder_from shell_program
      end

      it 'considers "{}" as a macro to be filled in with the changed path' do
        expect(call('a{}b').call('C')).to eq ['aCb']
        expect(call('a{{}b').call('C')).to eq ['a{Cb']
        expect(call('a{{}}b').call('C')).to eq ['a{C}b']
        expect(call('a{}b{}c').call('D')).to eq ['aDbDc']
      end

      it 'shell splits the result' do
        expect(call("a {}").call("A B")).to eq ["a", "A B"]

        expect(
          call("/path/to/prog --arg 'some val' --arg2 'some {} val2'").call("A B")
        ).to eq ["/path/to/prog", "--arg", "some val", "--arg2", "some A B val2"]
      end
    end
  end
end
